# Cursor Rules - 项目开发规范

## Markdown 文件管理规则

### 核心原则：理论与代码分离 🎯
- **最高优先级**: 面试题文件专注于理论描述和题目分析，代码实现统一放入`solutions`文件夹
- **适用范围**: 所有包含代码示例的面试题文件都需要进行理论与代码分离
- **实施策略**: 不论文件大小，只要包含代码实现都需要按此原则重构
- **质量标准**: 面试题文件应突出考察要点和解决思路，Solutions文件提供完整技术实现

### 文件长度管理
- **800行规则**: 当单个Markdown文件内容超过800行时，必须考虑拆分为多个子文件
- **拆分策略**: 按照逻辑章节、主题或功能模块进行拆分
- **命名规范**: 子文件应使用有意义的名称，反映其内容主题

### 文件链接和引用
- **相互引用**: 拆分后的文件必须通过Markdown链接进行相互引用
- **导航便利**: 在主文件中创建目录索引，链接到各个子文件
- **双向链接**: 子文件应包含返回主文件的链接
- **Solutions链接**: 面试题与对应代码解决方案之间建立明确的引用关系
- **链接格式示例**:
  ```markdown
  # 主文件索引
  - [Java基础知识](./Java/java-basics.md)
  - [Spring框架](./Java/spring-framework.md)
  - [数据库相关](./Database/database-concepts.md)
  
  # 子文件中的返回链接
  [← 返回主目录](../README.md)
  
  # 面试题与解决方案链接
  **📁 完整解决方案**：[JVM调优完整实现](../../../solutions/alibaba/jvm-optimization.md)
  
  # Solutions文件返回链接
  [← 返回Java高级面试题](../../questions/company-specific/alibaba/java-advanced.md)
  ```

### 文件结构组织
- **层级结构**: 使用文件夹按技术栈或主题分类
- **统一命名**: 文件名使用小写字母和连字符，如`java-collections.md`
- **索引文件**: 每个文件夹包含`README.md`作为该分类的索引
- **Solutions架构**: 按公司和技术主题组织代码解决方案文件

## Solutions文件夹管理规则

### 文件夹结构
```
solutions/
├── alibaba/                    # 阿里巴巴面试解决方案
├── google/                     # Google面试解决方案
├── microsoft/                  # 微软面试解决方案
└── common/                     # 通用技术解决方案
```

### 内容组织原则

#### 理论优先，代码辅助
- **核心原则**: Solutions文件以解决方案思路和原理分析为主，代码实现为辅助验证
- **结构层次**: 问题分析 → 解决方案思路 → 代码实现要点 → 面试总结
- **学习导向**: 让学习者先理解问题本质和解决思路，再通过代码加深理解

#### 内容深度要求
- **问题分析**: 深入分析业务背景、技术挑战、核心难点
- **方案设计**: 详细阐述技术选型依据、架构设计原理、实现策略
- **原理解释**: 说明为什么这样设计，对比其他方案的优劣势
- **实战考量**: 结合生产环境的实际需求和约束条件

### 文档结构模板

#### 标准Solutions文件结构
```markdown
# [公司名称]面试 - [技术主题]完整实现

## 🎯 解决方案概述
[深入分析核心问题和技术挑战]

## 💡 核心问题分析
### [业务场景]的技术挑战
**业务背景**：[具体业务特点和要求]
**技术难点**：[关键技术挑战点分析]

## 📝 题目[编号]：[题目标题]

### 解决方案思路分析
#### 1. [技术选型/架构设计]策略
**为什么选择[技术方案]？**
- 对比分析不同技术方案的优劣势
- 详细说明选择依据和适用场景
- 解释在当前业务场景下的优势

#### 2. [核心技术点]设计原理
**[技术实现]策略**：
- 详细的设计思路和实现原理
- 关键参数的计算依据和配置逻辑
- 性能优化考虑和权衡取舍

#### 3. [监控/优化]体系设计思路
**[实现方案]要点**：
- 系统性的设计理念和实现策略
- 分层次的处理机制和应对策略
- 完整的事件处理流程

### 代码实现要点
#### [技术模块]实现
[简要说明代码的设计思路和关键要点]

```java
/**
 * [功能描述]
 * 
 * 设计原理：
 * 1. [设计要点1]：[具体说明]
 * 2. [设计要点2]：[具体说明]
 * 3. [设计要点3]：[具体说明]
 */
[完整的代码实现，包含详细注释]
```

## 🎯 面试要点总结
### 技术深度体现
[列出技术亮点和深度要点]

### 生产实践经验
[结合实际生产环境的经验要点]

### 面试回答要点
[面试中的关键回答点和技术展示点]
```

### 代码实现要求

#### 代码质量标准
- **完整可运行**: 每个解决方案都应包含完整的、可直接运行的代码
- **详细注释**: 代码中包含设计原理、技术要点解析和实现思路说明
- **工程实践**: 代码体现真实项目的工程实践标准
- **性能考虑**: 展示性能优化和大规模场景的处理方案

#### 注释和说明规范
- **类级注释**: 说明设计原理、适用场景、技术优势
- **方法级注释**: 解释实现思路、参数选择依据、性能考虑
- **关键逻辑注释**: 对复杂算法和业务逻辑进行详细说明
- **配置参数说明**: 解释每个配置参数的作用和选择依据

### 面试要点总结要求

#### 技术深度展示
- **核心技术原理**: 深入理解底层实现机制
- **架构设计能力**: 系统性的设计思维和权衡能力
- **性能优化经验**: 针对高并发、大数据量场景的优化策略
- **问题解决能力**: 分析问题、设计方案、实施优化的完整能力

#### 生产实践体现
- **真实场景结合**: 基于实际业务场景的技术方案
- **工程化考虑**: 监控、告警、容错、扩展性等工程实践
- **团队协作经验**: 技术方案的推广和落地经验
- **持续优化思维**: 基于业务发展的技术演进策略

#### 面试回答策略
- **逻辑清晰**: 从问题分析到方案设计的完整逻辑链路
- **技术深度**: 展示对核心技术的深入理解
- **实战经验**: 结合具体项目和业务场景的实践经验
- **学习能力**: 技术选型的思考过程和持续学习的能力

## 面试题生成规则

### 面试题文件结构优化
- **题目概览**: 提供技术考察重点的总体介绍
- **知识结构图**: 使用Mermaid图展示技术关联关系
- **题目精简**: 重点描述问题背景、技术挑战、考察要点
- **解决方案链接**: 明确指向对应的代码实现文件
- **评分标准**: 提供面试评分的具体标准

### 优化后的面试题模板
```markdown
# [公司名称][技术岗位]面试题

## 📚 题目概览
[技术考察重点和特色说明]

## 🎯 核心技术考察重点
[按技术领域分类列出考察重点]

## 📊 知识结构关联图
```mermaid
[展示技术关联的图表]
```

## 📝 核心面试题目

### [技术领域] [难度标识]

#### 题目[编号]：[题目标题]
**问题背景**：[具体的业务场景描述]

**技术挑战**：
- 挑战点1
- 挑战点2

**考察要点**：
- 考察点1
- 考察点2

**📁 完整解决方案**：[链接到solutions文件]

## 📊 面试评分标准
[详细的评分维度和标准]

## 🎯 备考建议
[学习路径和建议]

## 🔗 相关资源链接
[相关技术文档和基础知识链接]
```

### Mermaid 图形使用
- **概念关联图**: 使用Mermaid图表展示技术concepts之间的关系
- **知识结构图**: 为复杂主题创建思维导图或流程图
- **学习路径图**: 展示知识点的学习顺序和依赖关系
- **系统架构图**: 展示复杂系统的架构设计

### 图表类型应用
```markdown
# 推荐的Mermaid图表类型：

## 1. 概念关系图 (Graph)
```mermaid
graph TD
    A[Java基础] --> B[面向对象]
    A --> C[集合框架]
    B --> D[继承]
    B --> E[多态]
    C --> F[List]
    C --> G[Map]
```

## 2. 学习路径图 (Flowchart)
```mermaid
flowchart LR
    Start([开始学习]) --> Basic[基础语法]
    Basic --> OOP[面向对象]
    OOP --> Collections[集合框架]
    Collections --> Concurrent[并发编程]
    Concurrent --> End([进阶主题])
```

## 3. 系统架构图 (Architecture)
```mermaid
graph TB
    Client[客户端] --> Gateway[API网关]
    Gateway --> Service1[用户服务]
    Gateway --> Service2[订单服务]
    Service1 --> DB1[(用户数据库)]
    Service2 --> DB2[(订单数据库)]
```
```

### 面试题结构规范
- **题目分类**: 按技术栈和难度级别分类
- **知识点标注**: 每道题标明涉及的核心knowledge points
- **关联图表**: 复杂topic包含相应的Mermaid图表
- **难度标识**: 使用标签标识难度级别（入门/中级/高级）
- **业务场景**: 结合真实业务场景进行题目设计

## 内容质量控制规则

### 理论与实践平衡
- **理论描述**: 面试题文件专注于概念解释和考察要点
- **代码实现**: Solutions文件提供完整的技术实现
- **场景结合**: 理论知识与实际业务场景紧密结合
- **深度适中**: 既要有足够技术深度，又要便于快速掌握

### 代码质量要求
- **工程实践**: 代码体现真实项目的工程实践标准
- **性能考虑**: 展示性能优化和大规模场景的处理方案
- **异常处理**: 包含完善的异常处理和容错机制
- **监控告警**: 包含生产环境的监控和告警机制

### Markdown 编写规范
- **标题层级**: 合理使用H1-H6标题，保持层级清晰
- **代码块**: 所有代码使用适当的语言标识符
- **表格格式**: 使用标准Markdown表格语法
- **列表缩进**: 保持一致的缩进格式
- **图标使用**: 适当使用emoji增强可读性

### 文档维护
- **定期检查**: 检查链接有效性
- **内容更新**: 及时更新过时内容
- **交叉引用**: 确保相关内容之间的引用完整
- **版本管理**: 重要修改应记录在版本历史中

## 技术栈特定规则

### Java面试题规则
- **JVM深度**: 必须包含JVM调优、内存管理等高级主题
- **并发编程**: 重点考察线程安全、锁机制、并发工具类
- **Spring生态**: 涵盖Spring Boot、Spring Cloud等现代开发框架
- **实战经验**: 结合大厂实际业务场景设计题目

### 系统设计题规则
- **架构图**: 必须使用Mermaid绘制清晰的架构图
- **扩展性**: 考虑系统的水平扩展和性能优化
- **可靠性**: 包含容错、降级、监控等可靠性设计
- **技术选型**: 说明技术选择的依据和权衡

## 工具和插件建议
- **Mermaid预览**: 使用支持Mermaid实时预览的编辑器
- **链接检查**: 定期检查文档间链接的有效性
- **文件统计**: 监控文件行数，及时拆分过长文件
- **代码格式**: 使用统一的代码格式化工具
- **图片压缩**: 优化图片文件大小，提升加载速度

## 项目协作规范

### Git提交规范
- **提交信息**: 使用清晰的中文描述修改内容
- **文件分类**: 理论文件和代码文件的修改分开提交
- **版本标记**: 重要功能完成时打版本标签

### 代码审查要点
- **技术准确性**: 确保技术描述和代码实现的准确性
- **面试相关性**: 验证内容是否符合目标公司的面试特点
- **文档完整性**: 检查链接完整性和文档结构合理性

---
*遵循这些规则，创建结构清晰、理论与实践并重的高质量面试准备材料* 